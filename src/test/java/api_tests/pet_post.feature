# ********RoostGPT********

# Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /pet_post for http method type POST 
# RoostTestHash=988c5ab2ac
# 
# 

# ********RoostGPT********
Feature: Pet Store Management

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def authToken = karate.properties['auth.token'] || karate.get('authToken', '{{ $processEnvironment.AUTH_TOKEN }}')
    * configure headers = { Authorization: '#(authToken)' }

  Scenario: Add a new pet to the store
    Given path '/v2/pet'
    And request
    """
    {
      "id": 1,
      "category": {
        "id": 1,
        "name": "Dogs"
      },
      "name": "doggie",
      "photoUrls": ["string"],
      "tags": [{
        "id": 1,
        "name": "string"
      }],
      "status": "available"
    }
    """
    When method post
    Then status 200
    And match response ==
    """
    {
      "id": '#number',
      "category": {
        "id": '#number',
        "name": '#string'
      },
      "name": '#string',
      "photoUrls": ['#string'],
      "tags": [{
        "id": '#number',
        "name": '#string'
      }],
      "status": '#string'
    }
    """
    And match response.id == 1
    And match response.category.id == 1
    And match response.category.name == 'Dogs'
    And match response.name == 'doggie'
    And match response.photoUrls[0] == 'string'
    And match response.tags[0].id == 1
    And match response.tags[0].name == 'string'
    And match response.status == 'available'

